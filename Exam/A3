void CAudioGenerateDoc::OnGenerateA3()
{
	// Call to open the generator output
	if (!GenerateBegin())
		return;
	double freq = 622.25;
	short audio[2];
	double num_harmonics = m_sampleRate / (2 * freq);
	double harmonic = 17;
	double totaltimeplayin5sec = 220502;
	int temp = 1;
	int count = 0;

	for (double time = 0.; time < m_duration; time += 1. / m_sampleRate)
	{
		if (time <= 5)
		{
			if (count >= totaltimeplayin5sec / harmonic)
			{
				temp = temp + 2;
				count = 0;
			}
			long sample = 0;
			int phase1 = 1;
			for (int i = 1; i <= temp; i = i + 2)
			{

				if (phase1 % 2 == 1)
				{
					sample += (m_amplitude / (i * i)) * sin(time  * M_PI * ((i)*freq));
				}

				else
				{
					sample -= (m_amplitude / (i * i)) * sin(time  * M_PI * ((i)*freq));
				}
				phase1++;
			}

			audio[0] = short(sample);
			audio[1] = short(sample);
			count++;
		}

		else
		{
			long sample = 0;
			int phase = 1;
			for (int i = 1; i < num_harmonics; i = i + 2)
			{

				if (phase % 2 == 1)
				{
					sample += (m_amplitude / (i * i)) * sin(time  * M_PI * ((i)*freq));
				}

				else
				{
					sample -= (m_amplitude / (i * i)) * sin(time  * M_PI * ((i)*freq));

				}

				phase++;
			}

			audio[0] = short(sample);
			audio[1] = short(sample);
		}

		GenerateWriteFrame(audio);

		// The progress control
		if (!GenerateProgress(time / m_duration))
			break;
	}
	// Call to close the generator output
	GenerateEnd();
}
