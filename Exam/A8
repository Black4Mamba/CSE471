void CAudioGenerateDoc::OnGenerateA8()
{

	std::vector<short>	wavetable;

	double freq = 882;
	short audio[2];
	int num_harmonics = m_sampleRate / (2 * freq);
	int count = 0;

	for (double time = 0.; time < m_duration; time += 1. / m_sampleRate)
	{
		long sample = 0;
		for (int i = 1; i < num_harmonics; i++)
		{
			sample = sample + (m_amplitude / i) * sin(time * 2 * M_PI * (i*freq));
		}

		audio[0] = short(sample);
		wavetable.push_back(audio[0]);
		count++;

	}

	if (!GenerateBegin())
		return;
	int	p = 0;
	double duration = 5;
	for (double time = 0; time<duration; time += 1. / m_sampleRate)
	{
		audio[0] = wavetable[p];
		audio[1] = audio[0];
		p++;
		if (p >= wavetable.size())
			p = 0;
		GenerateWriteFrame(audio);
		//	The	progress	control	
		if (!GenerateProgress(time / duration))
			break;
	}
	GenerateEnd();
}
